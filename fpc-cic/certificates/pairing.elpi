type pairing cert -> cert -> cert.
type pairingdex index -> index -> index.

prodL_je    (pairing A B) Sort (pairing C1 Ca) (pairing C2 Cb) (x\ pairing (C3 x) (Cc x)) :-
  prodL_je A Sort C1 C2 C3,
  prodL_je B Sort Ca Cb Cc.
prodR_jc    (pairing A B) Sort (pairing C1 Ca)        (x\ pairing (C2 x) (Cb x)) :-
  prodR_jc A Sort C1 C2,
  prodR_jc B Sort Ca Cb.
releaseL_je (pairing A B) Sort (pairing C1 Ca)        (x\ pairing (C2 x) (Cb x)) :-
  releaseL_je A Sort C1 C2,
  releaseL_je B Sort Ca Cb.
releaseR_je (pairing A B) Sort (pairing C1 Ca)        (pairing C2 Cb) :- 
  releaseR_je A Sort C1 C2,
  releaseR_je B Sort Ca Cb.
decideL_jc  (pairing A B) Sort (pairing C1 Ca)        (pairing C2 Cb) (pairingdex I1 Ia) :-
  decideL_jc A Sort C1 C2 I1,
  decideL_jc B Sort Ca Cb Ia.
decideR_jc  (pairing A B) Sort (pairing C1 Ca)        (pairing C2 Cb) :-
  decideR_jc A Sort C1 C2,
  decideR_jc B Sort Ca Cb.
storeR_jc   (pairing A B)                             (pairing C1 Ca) :-
  storeR_jc A C1,
  storeR_jc B Ca.
axiomL_je   (pairing A B) Sort (pairing C1 Ca) :-
  axiomL_je A Sort C1,
  axiomL_je B Sort Ca.
axiomR_je   (pairing A B) Sort (pairing C1 Ca)        (pairingdex I1 Ia) :-
  axiomR_je A Sort C1 I1,
  axiomR_je B Sort Ca Ia.
prodsort_jc (pairing A B) Sort1 (pairing C1 Ca) Sort2 (x\ pairing (C2 x) (Cb x)) :-
  prodsort_jc A Sort1 C1 Sort2 C2,
  prodsort_jc B Sort1 Ca Sort2 Cb.
sorted_jc   (pairing A B) :-
  sorted_jc A,
  sorted_jc B.
storeL_jc   (x\ pairing (A x) (B x)) (x\ pairingdex (I1 x) (Ia x)) Sort (pairing (C1) (Ca)) :-
  storeL_jc A I1 Sort C1,
  storeL_jc B Ia Sort Ca.