accumulate ljf-kernel.
accumulate dd-fpc.
accumulate seq-fpc.
accumulate lambda-fpc.
accumulate pairing-fpc.

type a,b,c form.
type example list string -> prop.
% example ["1"] :- ljf_entry [dd (s zero)] ((n a) arr (n a)).
% example ["2"] :- ljf_entry [dd (s (s (s zero)))] (( (n a) arr ( (n b) or+ (n c) ) ) arr ( ( (n a) arr (n b)) or+ ((n a) arr (n c) ) )).
% example ["3"] :- ljf_entry [dd (s zero), seq X, tm T] ((n a) arr (n a)), print X, print T.
% example ["4"] :- ljf_entry [dd (s (s (s zero))), seq X] (( (n a) arr ( (n b) or+ (n c) ) ) arr ( ( (n a) arr (n b)) or+ ((n a) arr (n c) ) )), print X.
% example ["5"] :- ljf_entry [dd (s zero), tm T] ((n a) arr (n a)), print T.
example ["6"] :- ljf_entry ((seq S) <c> (dd (s (s (s zero))))) (((n a) arr (((n b) arr f) arr f)) arr ((((n a) arr (n b)) arr f) arr f)), print S.
example ["7"] :- ljf_entry ((seq S) <c> (dd (s (s (s zero))))) (((n a) arr (((n b) arr f) arr f)) arr ((((n a) arr (n b)) arr f) arr f)),
                 print "I HAAAAAAAVE FOOOOOOYUUUUUUUNNND" S,
                 proof_to_tex [] [(((n a) arr (((n b) arr f) arr f)) arr ((((n a) arr (n b)) arr f) arr f))] S Str, print Str.
