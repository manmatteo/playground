type cut_ancestor                form -> prop.
% type mark                       index -> prop.
typeabbrev seq (pair (list form) (list form)).
kind mark type.
type unmarked mark.
type marked form -> mark.
type ceres mark -> list (pair index form) -> list seq -> cert.

cut_je (ceres unmarked Ctx Clause) (ceres (marked F) Ctx C1) (ceres (marked F) Ctx C2) F :- merge_cset C1 C2 C.
storeL_jc   (ceres (marked F) Ctx CSet) (x\ ceres unmarked [(pr (Indx x) F)|Ctx] CSet) Indx.
storeL_jc   (ceres unmarked Ctx CSet) (x\ ceres unmarked Ctx CSet) Indx.
storeR_jc   (ceres (marked F) Ctx CSet) (x\ ceres unmarked [(pr (Indx x) F)|Ctx] CSet) Indx.
storeR_jc   (ceres unmarked Ctx CSet) (x\ ceres unmarked Ctx CSet) Indx.
decideL_je  (ceres unmarked Ctx CSet) (ceres (marked F) Ctx CSet) Indx :- std.lookup Ctx Indx F.
decideL_je  (ceres unmarked Ctx CSet) (ceres unmarked Ctx CSet) Indx :- not (sigma X\ std.lookup Ctx Indx X).
decideR_je  (ceres unmarked Ctx CSet) (ceres (marked F) Ctx CSet) Indx :- std.lookup Ctx Indx F.
decideR_je  (ceres unmarked Ctx CSet) (ceres unmarked Ctx CSet) Indx :- not (sigma X\ std.lookup Ctx Indx X).
releaseL_je (ceres A B C) (ceres A B C).
releaseR_je (ceres A B C) (ceres A B C).
initialL_je (ceres (marked F) Ctx [pr Body F]) :- std.map Ctx (x\ y\ snd x y) Body. 
initialL_je (ceres unmarked Ctx [pr Body [f]] ) :- std.map Ctx (x\ y\ snd x y) Body. 
initialL_je (ceres (marked F) Ctx [pr Body F]) _Index:- std.map Ctx (x\ y\ snd x y) Body. 
initialL_je (ceres unmarked Ctx [pr Body [f]] ) _Index :- std.map Ctx (x\ y\ snd x y) Body. 
arr_je      (ceres Mrk Ctx Cset) (ceres Mrk1 Ctx1 C1) (ceres Mrk2 Ctx2 C2) :- cut_ancestor
arr_jc      (ceres (marked (A arr B)) Ctx CSet) (ceres (marked A) Ctx CSet).
true_je     (cset _).
false_jc    (cset _).
true_jc     (cset C) (cset C).
% some_jc     (dd D) (x\ dd D).
% all_jc      (dd D) (x\ dd D).
% some_je     (dd D) (dd D) _.
% all_je      (dd D) (dd D) _.
% andPos_jc   (dd D) (dd D).
% or_jc       (dd D) (dd D) (dd D).
% andNeg_jc   (dd D) (dd D) (dd D).
% andPos_je   (dd D) (dd D) (dd D).
% andNeg_je   (dd D) (dd D) _.
% or_je       (dd D) (dd D) _.

type merge_cset, merge_aux list seq -> list seq -> list seq -> prop.
merge_cset X Y Z :- print "merge" X Y Z, fail.
merge_aux X Y Z :- print "mergeaux" X Y Z, fail.
merge_cset [] _ [].
merge_cset [A | C1] C2 C :-
  merge_aux [A | C1] C2 C',
  merge_cset C1 C2 C'',
  std.append C' C'' C.
merge_aux _ [] [].
merge_aux [(unfoc L1 R1) | Cset1] [(unfoc L2 R2) | Cset2] [(unfoc L R) | Cset] :-
  std.append L1 L2 L, std.append R1 R2 R,
  merge_aux [(unfoc L1 R1) | Cset1] Cset2 Cset.

pred cfilter i:list (pair index form), o:list form.
cfilter [] [].
cfilter [(pr X Y)|L] R :- if (mark X) (R = Y :: L1) (R = L1), cfilter L L1.
