Specification "exp-proofs".

% deep OrigForm ETree DeepForm
Define deep : bool -> et -> bool -> prop by
deep (and F G) (eAnd X Y) (and Dp1 Dp2) := deep F X Dp1 /\ deep G Y Dp2;
deep (or F G) (eOr X Y) (or Dp1 Dp2) := deep F X Dp1 /\ deep G Y Dp2;
deep (ex F) (eSome (cons (pr T X) null)) Dp := deep (F T) X Dp;
deep (ex F) (eSome (cons (pr T X) L)) (or Dp1 Dp2) := deep (F T) X Dp1 /\ deep (ex F) (eSome L) Dp2;
deep (all F) (eAll T X) Dp := deep (F T) X Dp;
deep F (eLit) F.

Theorem translate_computes_deep : forall (SkF:bool) (Q1:et) (Q2:et) (Dp:bool) (F:bool) (Q:et) (Dp':bool),
{translate SkF Q1 Dp F Q2 Dp'} -> deep SkF Q1 Dp /\ deep F Q2 Dp'.
induction on 1.
 intros. case H1.
 apply IH to H2.
search.
 apply IH to H2.
 apply IH to H3. search.
 apply IH to H2.
 apply IH to H3. search.
 apply IH to H2. search.
 apply IH to H2.
 apply IH to H3. search.
 search.

Define skolem : bool -> bool -> prop by
skolem (and F G) (and F' G') := skolem F F' /\ skolem G G';
skolem (or F G) (or F' G') := skolem F F' /\ skolem G G';
skolem (ex F) (ex F') := skolem F F';
skolem (all F) F' :=