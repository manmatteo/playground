%%Title: nat.thm
%%Description: Some definitions and theorems about the most basic
%%             aspects of nature numbers
%%Author: Dale Miller
%%Dates: 6 March 2017, 31 December 2018

Kind nat      type.
Type zero     nat.
Type succ     nat -> nat.

Define nat : nat -> prop by
  nat zero
; nat (succ N) := nat N.

Theorem zero-nonzero : forall N, nat N -> (N = zero \/ exists M, nat M /\ N = (succ M)).
  induction on 1. intros tyN. tyN: case tyN.
    left. search.
    disj: apply IH to tyN. disj: case disj.
      right. exists zero. search.
      right. exists (succ M). search.

Theorem nat_succ : forall N, nat N -> nat (succ N).
induction on 1. intros tyN. tyN: case tyN.
   search.
   add: apply IH to tyN. search.

Theorem succ_nat : forall N, nat (succ N) -> nat N.
  intros aux. case aux. search.

Theorem eq_zero_decidable : forall (n : nat), nat n -> ((n = zero -> false) \/ (n = zero)).
  induction on 1. intros tyN. tyN: case tyN.
    right. search.
    left. intros aux. case aux.

Theorem decide-eq : forall N, nat N -> forall M, nat M -> ((N = M -> false) \/ (N = M)).
  induction on 1. intros tyN tyM. tyN: case tyN.
    disj: apply zero-nonzero to tyM. disj: case disj.
      right. search.
      left. intros aux. case aux.
    tyM: case tyM.
      left. intros aux. case aux.
    add: apply IH to tyN. disj: apply add to tyM. disj: case disj.
      left. intros aux. case aux. backchain disj.
      right. search.

Define even : nat -> prop by
  even zero ;
  even (succ (succ X)) := even X.

Define odd : nat -> prop by
  odd (succ zero) ;
  odd (succ (succ X)) := odd X.

Theorem even_type : forall X, even X -> nat X.
 induction on 1. intros. case H1. search.  apply IH to H2. search.

Theorem odd_type : forall X, odd X -> nat X.
 induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem even_odd : forall N, even N -> odd (succ N).
  induction on 1. intros pivot. pivot: case pivot.
    search.
    add: apply IH to pivot. search.

Theorem odd_even : forall N, odd N -> even (succ N).
  induction on 1. intros pivot. pivot: case pivot.
    search.
    add: apply IH to pivot. search.

Theorem even_or_odd : forall N, nat N -> even N \/ odd N.
  induction on 1. intros pivot. pivot: case pivot.
    left. search.
    result: apply IH to pivot. c: case result.
      right. apply even_odd to c. search.
      left.  apply odd_even to c. search.

Theorem not_odd_even : forall X, nat X -> (odd X -> false) -> even X.
  intros. apply even_or_odd to H1. case H3. search. apply H2 to H4.

Theorem even_odd_exclusion : forall N, even N -> odd N -> false.
  induction on 1. intros e o. e: case e.
    case o.
    o: case o. apply IH to e o.

