% Aim: interpret terms in one pass, without resorting to the usual
% two phases pre-processing (tagging - clause building => resolution)

% Completely broken at the moment

kind ty type.
kind tm type.

type app tm -> tm -> tm.
type abs (tm -> tm) -> tm.

type arr ty -> ty -> ty.

type q   ty -> prop.
type ans ty -> ty -> prop.

c Ty1 L1 (app M1 M2) K :-
  pi l2\ pi l3\ pi l4\
  (q L1 :- q l2) =>
  (q l4 :- q l3) =>
  % ans ...
  c (arr Ty2 Ty1) (larr l3 l2) M1 (
  c Ty2 l4 M2 K
)

interpq GoalLabel

interpa GoalLabel

interp (app M1 M2) Ty1 Out :-
  interp M1 (arr Ty2 Ty1) (pair In Out'),
  (Out = Out'),
  interp M2 Ty2 In.

goi_clausify Term Ty Clauses :-
  
goi_clausify (abs M) (arr Ty2 Ty1) Clauses :-
  pi ty3\ pi ty4\ pi x\
  goi_clausify (M x) Ty1 Cl,
  append Cl
  (q Ty2 :- q ty4) =>
  (q ty3 :- q Ty1) => goi_ans M ty3 X.

goi_start Term Ty X :-
  pi t\ q t =>
    goi_interp Term t (ans X t).

goi_interp Term Type Goal :-
  goi_clause Term Type Clause,
  goi_backchain Clause Goal.


goi_clause (abs M) (arr Ty2 Ty1) Cl :-
  

goi_ans (abs M) (arr Ty2 Ty1) X :-
  pi ty3\ pi ty4\
  (q Ty2 :- q ty4) =>
  (q ty3 :- q Ty1) => goi_ans M ty3 X.

goi_ans (app T U) Ty1 X :-
  pi ty2\ pi ty3\ pi ty4\
  (q ty2 :- q Ty1) =>
  (ans X Ty1 :- ans X ty2) =>
  (q 

goi_backchain A A.
goi_backchain (<- A B) G :- goi_backchain B G, goi_interp A.

%% A reminder: a Prolog interpreter
interp X :-
  clause A,
  backchain A X.
backchain A A.
backchain (imp A B) G :-
  backchain B G, interp A.

%% More outtakes

type of tm -> ty -> prop.
of (app M N) V :-
  of M (arr U V),
  of N U.
of (abs X) (arr P Q) :-
  pi x\ of x P =>
    of (X x) Q.

type goi_interp tm -> ty -> prop.

goi_interp (app M N) Ty1 :-
  pi ty2\ pi ty3\ pi ty4\
  (q ty2 :- q Ty1) =>
  sigma X\
  (ans X Ty1 :- ans X ty2) =>
  (q ty4 :- q ty3) =>
  sigma Y\
  (ans Y ty3 :- ans Y ty4) =>
  goi_interp M (arr ty3 ty2),
  goi_interp N ty4.

goi_interp (abs T) (arr Ty2 Ty1) :-
  pi ty3\ pi ty4\
  (q ty3 :- q Ty1) =>
  sigma X\
  (ans X Ty1 :- ans X ty3) =>
  (q Ty2 :- q ty4) =>
  sigma Y\
  (ans Y ty4 :- ans Y Ty2) =>
  pi x\ goi_interp x ty4 =>
  (print "goi_interp" (T x) ty3,
  goi_interp (T x) ty3).

# BUCO QUI!! ???
# goi_interp X Ty :-
#   goi_interp X Ty2,
#   

type test prop.
test :-
  pi p\ goi_interp (abs (x\ x)) (arr p p).
