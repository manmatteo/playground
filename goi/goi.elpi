kind ty type.
kind tm type.

type app tm -> tm -> tm.
type abs (tm -> tm) -> tm.

type arr ty -> ty -> ty.

type q ty -> prop.
type ans ty -> ty -> prop.

type of tm -> ty -> prop.
of (app M N) V :-
  of M (arr U V),
  of N U.
of (abs X) (arr P Q) :-
  pi x\ of x P =>
    of (X x) Q.

type goi_interp tm -> ty -> prop.

goi_interp (app M N) Ty1 :-
  pi ty2\ pi ty3\ pi ty4\
  (q ty2 :- q Ty1) =>
  sigma X\
  (ans X Ty1 :- ans X ty2) =>
  (q ty4 :- q ty3) =>
  sigma Y\
  (ans Y ty3 :- ans Y ty4) =>
  goi_interp M (arr ty3 ty2),
  goi_interp N ty4.

goi_interp (abs T) (arr Ty2 Ty1) :-
  pi ty3\ pi ty4\
  (q ty3 :- q Ty1) =>
  sigma X\
  (ans X Ty1 :- ans X ty3) =>
  (q Ty2 :- q ty4) =>
  sigma Y\
  (ans Y ty4 :- ans Y Ty2) =>
  pi x\ goi_interp x ty4 =>
  (print "goi_interp" (T x) ty3,
  goi_interp (T x) ty3).

# BUCO QUI!! ???
# goi_interp X Ty :-
#   goi_interp X Ty2,
#   

type test prop.
test :-
  pi p\ goi_interp (abs (x\ x)) (arr p p).
