kind rul    type.
typeabbrev  proof (list rul).
type seq    proof -> cert.
type impr, axl,top,bot   rul.
type impl, orl   proof -> rul.
type strl, strr, decl, decr, axr
            index -> rul.
type orr    choice -> rul.

storeL_jc   (seq [strl (Idx _) | P]) (x\ seq P) (x\ Idx x).
decideL_je  (seq [decl Idx | P]) (seq P) Idx.
storeR_jc   (seq [strr (Idx _) | P]) (x\ seq P) (x\ Idx x).
decideR_je  (seq [decr Idx | P]) (seq P) Idx.
releaseL_je (seq D) (seq D).
releaseR_je (seq D) (seq D).
initialL_je (seq [axl]).
initialR_je (seq [axr Idx]) Idx.
% some_jc     (seq D) (x\ dd D).
% all_jc      (seq D) (x\ dd D).
% some_je     (seq D) (pr (dd D) _).
% all_je      (seq D) (pr (dd D) _).
arr_jc      (seq [impr | P]) (seq P).
arr_je      (seq [impl P1 | P2]) (seq P1) (seq P2).
% andPos_jc   (dd D) (dd D).
or_jc       (seq [orl P1 | P2]) (seq P1) (seq P2).
or_je       (seq [orr Choice | P]) (seq P) Choice.
% andNeg_jc   (dd D) (pr (dd D) (dd D)).
% andPos_je   (dd D) (pr (dd D) (dd D)).
% andNeg_je   (dd D) (pr (dd D) _).
true_je     (seq [top]).
true_jc     (seq [top|P]) (seq P).
false_jc    (seq [bot]).

type form_to_tex form -> string -> prop.
form_to_tex (n a) "a".
form_to_tex (n b) "b".
form_to_tex (n c) "c".
form_to_tex f "\\bot".
form_to_tex (A arr f) Str :-
  form_to_tex A F1,
  Str = "\\neg" ^ F1.
form_to_tex (A arr B) Str :-
  form_to_tex A F1, form_to_tex B F2,
  Str = F1 ^ "\\to" ^ F2.
type seqr_to_tex list form -> string -> prop.
% seqr_to_tex A B :- print "seqr" A B, fail.
seqr_to_tex [] "".
seqr_to_tex [A|R] Str :-
  form_to_tex A F,
  (R = [], Str = F ;
   R = [_|_],seqr_to_tex R Str', Str is F ^ "," ^ Str').
type seql_to_tex list form -> list form -> string -> prop.
% seql_to_tex A B C :- print "seql" A B C, fail.
seql_to_tex [] Right Str :-
  seqr_to_tex Right Str',
  Str is "\\vdash" ^ Str'.
seql_to_tex [A|Left] R Str :-
  form_to_tex A F,
  (Left = [], seql_to_tex Left R Str', Str is F ^ Str';
   Left = [_|_], seql_to_tex Left R Str', Str is F ^ "," ^ Str').
type proof_to_tex list form -> list form -> proof -> string -> prop.
proof_to_tex A B C D :- print "proof" A B C D, fail.
proof_to_tex L R [] "".
proof_to_tex L R [impr | P] Str :-
  memb_and_rest R (A arr B) R',
  seql_to_tex L R F,
  proof_to_tex [A | L] [B | R'] P Str',
  Str is "\\infer{" ^ F ^ "}{" ^ Str' ^"}".
proof_to_tex L R [impl P1 | P2] Str :-
  std.mem L (A arr B),
  seql_to_tex L R F,
  proof_to_tex L [A | R] P1 Str1,
  proof_to_tex [B | L] R P2 Str2,
  Str is "\\infer{" ^ F ^ "}{" ^ Str1 ^ "&" ^ Str2 ^ "}".
proof_to_tex L R [bot] Str :-
  seql_to_tex L R Str.
proof_to_tex L R [axl] F :-
  seql_to_tex L R F.
proof_to_tex L R [strr _|P] Str :- proof_to_tex L R P Str.
proof_to_tex L R [strl _|P] Str :- proof_to_tex L R P Str.
proof_to_tex L R [decr _|P] Str :- proof_to_tex L R P Str.
proof_to_tex L R [decl _|P] Str :- proof_to_tex L R P Str.

